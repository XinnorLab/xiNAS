---
- name: Apply xiRAID license
  ansible.builtin.command: "xicli license update -p {{ xiraid_license_path }}"
  changed_when: false
  tags: [raid_fs, raid]

- name: Build list of xiRAID devices
  ansible.builtin.set_fact:
    xiraid_device_basenames: "{{ xiraid_arrays | map(attribute='devices') | flatten | map('basename') | list }}"
  tags: [raid_fs, raid]

- name: Ensure mdadm package present
  ansible.builtin.apt:
    name: mdadm
    state: present
  tags: [raid_fs, raid]

- name: Find active MD RAID arrays
  ansible.builtin.command: lsblk -ln -o NAME,TYPE | awk '$2 ~ /^raid/ {print "/dev/"$1}'
  register: mdraid_scan
  changed_when: false
  failed_when: false
  tags: [raid_fs, raid]

- name: Stop leftover MD RAID arrays on xiRAID devices
  ansible.builtin.shell: |
    set -e
    md_devs=$(lsblk -ln -o NAME,TYPE | awk '$2 ~ /^raid/ {print "/dev/"$1}')
    for md in $md_devs; do
      [ -n "$(lsblk -nro MOUNTPOINT "$md")" ] && continue
      comps=$(lsblk -nr -o NAME "$md" | tail -n +2)
      for c in $comps; do
        case " {{ xiraid_device_basenames | join(' ') }} " in
          *" $c "*)
            mdadm --stop "$md"
            mdadm --zero-superblock "/dev/$c"
            ;;
        esac
      done
    done
  args:
    executable: /bin/bash
  changed_when: false
  tags: [raid_fs, raid]

- name: Gather existing xiRAID arrays (json)
  ansible.builtin.command: xicli raid show -f json
  register: xiraid_list
  changed_when: false
  failed_when: xiraid_list.rc != 0
  tags: [raid_fs, raid]

- name: Set fact â€“ parsed arrays
  ansible.builtin.set_fact:
    existing_arrays: "{{ xiraid_list.stdout | from_json }}"
  tags: [raid_fs, raid]

- name: Create xiRAID arrays that are missing
  ansible.builtin.include_tasks: create_array.yml
  loop: "{{ xiraid_arrays }}"
  loop_control:
    loop_var: item
  # If `xiraid_list.stdout` couldn't be parsed, `existing_arrays` may be `None`.
  # Apply `default([])` before the `json_query` filter to avoid type errors.
  # Pass `true` to `default` so that `None` is treated as undefined.
  when: item.name not in ((existing_arrays | default([], true) | json_query('[].name')) | default([], true))
  tags: [raid_fs, raid]

# ----------------------- Filesystem section -------------------
- name: Ensure XFS utils present
  ansible.builtin.apt:
    name: xfsprogs
    state: present
  tags: [raid_fs, fs]

- name: Create XFS filesystems if absent
  ansible.builtin.include_tasks: create_fs.yml
  loop: "{{ xfs_filesystems }}"
  loop_control:
    loop_var: item
  tags: [raid_fs, fs]
